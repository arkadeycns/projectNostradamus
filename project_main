{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7843228,"sourceType":"datasetVersion","datasetId":4598425}],"dockerImageVersionId":30664,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/arkadey04/projectnostradamus?scriptVersionId=172852172\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-19T11:45:27.443566Z","iopub.execute_input":"2024-04-19T11:45:27.444021Z","iopub.status.idle":"2024-04-19T11:45:28.560181Z","shell.execute_reply.started":"2024-04-19T11:45:27.443985Z","shell.execute_reply":"2024-04-19T11:45:28.559156Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/car-prices-of-indian-markets/car data.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"cars = pd.read_csv('/kaggle/input/car-prices-of-indian-markets/car data.csv')\ncars","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:28.562629Z","iopub.execute_input":"2024-04-19T11:45:28.563281Z","iopub.status.idle":"2024-04-19T11:45:28.608242Z","shell.execute_reply.started":"2024-04-19T11:45:28.563237Z","shell.execute_reply":"2024-04-19T11:45:28.606984Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"    Car_Name  Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n0       ritz  2014           3.35           5.59       27000    Petrol   \n1        sx4  2013           4.75           9.54       43000    Diesel   \n2       ciaz  2017           7.25           9.85        6900    Petrol   \n3    wagon r  2011           2.85           4.15        5200    Petrol   \n4      swift  2014           4.60           6.87       42450    Diesel   \n..       ...   ...            ...            ...         ...       ...   \n296     city  2016           9.50          11.60       33988    Diesel   \n297     brio  2015           4.00           5.90       60000    Petrol   \n298     city  2009           3.35          11.00       87934    Petrol   \n299     city  2017          11.50          12.50        9000    Diesel   \n300     brio  2016           5.30           5.90        5464    Petrol   \n\n    Seller_Type Transmission  Owner  \n0        Dealer       Manual      0  \n1        Dealer       Manual      0  \n2        Dealer       Manual      0  \n3        Dealer       Manual      0  \n4        Dealer       Manual      0  \n..          ...          ...    ...  \n296      Dealer       Manual      0  \n297      Dealer       Manual      0  \n298      Dealer       Manual      0  \n299      Dealer       Manual      0  \n300      Dealer       Manual      0  \n\n[301 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Car_Name</th>\n      <th>Year</th>\n      <th>Selling_Price</th>\n      <th>Present_Price</th>\n      <th>Kms_Driven</th>\n      <th>Fuel_Type</th>\n      <th>Seller_Type</th>\n      <th>Transmission</th>\n      <th>Owner</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ritz</td>\n      <td>2014</td>\n      <td>3.35</td>\n      <td>5.59</td>\n      <td>27000</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>sx4</td>\n      <td>2013</td>\n      <td>4.75</td>\n      <td>9.54</td>\n      <td>43000</td>\n      <td>Diesel</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ciaz</td>\n      <td>2017</td>\n      <td>7.25</td>\n      <td>9.85</td>\n      <td>6900</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>wagon r</td>\n      <td>2011</td>\n      <td>2.85</td>\n      <td>4.15</td>\n      <td>5200</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>swift</td>\n      <td>2014</td>\n      <td>4.60</td>\n      <td>6.87</td>\n      <td>42450</td>\n      <td>Diesel</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>296</th>\n      <td>city</td>\n      <td>2016</td>\n      <td>9.50</td>\n      <td>11.60</td>\n      <td>33988</td>\n      <td>Diesel</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>297</th>\n      <td>brio</td>\n      <td>2015</td>\n      <td>4.00</td>\n      <td>5.90</td>\n      <td>60000</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>298</th>\n      <td>city</td>\n      <td>2009</td>\n      <td>3.35</td>\n      <td>11.00</td>\n      <td>87934</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>299</th>\n      <td>city</td>\n      <td>2017</td>\n      <td>11.50</td>\n      <td>12.50</td>\n      <td>9000</td>\n      <td>Diesel</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>300</th>\n      <td>brio</td>\n      <td>2016</td>\n      <td>5.30</td>\n      <td>5.90</td>\n      <td>5464</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>301 rows Ã— 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"cars.isna().sum()\n#checking for missing value , if any","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:28.609979Z","iopub.execute_input":"2024-04-19T11:45:28.610332Z","iopub.status.idle":"2024-04-19T11:45:28.621566Z","shell.execute_reply.started":"2024-04-19T11:45:28.610303Z","shell.execute_reply":"2024-04-19T11:45:28.620023Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"Car_Name         0\nYear             0\nSelling_Price    0\nPresent_Price    0\nKms_Driven       0\nFuel_Type        0\nSeller_Type      0\nTransmission     0\nOwner            0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"cars['Age'] = 2024 - cars['Year']\ncars.drop('Year', axis = 1, inplace = True)\ncars.drop(labels='Car_Name',axis= 1, inplace = True)\ncars.rename(columns = {'Selling_Price':'Selling_Price(lacs)','Present_Price':'Present_Price(lacs)','Owner':'Past_Owners'},inplace = True)\n#processing the data ","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:28.624236Z","iopub.execute_input":"2024-04-19T11:45:28.624556Z","iopub.status.idle":"2024-04-19T11:45:28.639877Z","shell.execute_reply.started":"2024-04-19T11:45:28.62453Z","shell.execute_reply":"2024-04-19T11:45:28.638485Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"cars = pd.get_dummies(data = cars,drop_first=True, dtype = 'int') \n#handing categorical features\ncars.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:28.641452Z","iopub.execute_input":"2024-04-19T11:45:28.641889Z","iopub.status.idle":"2024-04-19T11:45:28.672468Z","shell.execute_reply.started":"2024-04-19T11:45:28.641858Z","shell.execute_reply":"2024-04-19T11:45:28.67123Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   Selling_Price(lacs)  Present_Price(lacs)  Kms_Driven  Past_Owners  Age  \\\n0                 3.35                 5.59       27000            0   10   \n1                 4.75                 9.54       43000            0   11   \n2                 7.25                 9.85        6900            0    7   \n3                 2.85                 4.15        5200            0   13   \n4                 4.60                 6.87       42450            0   10   \n\n   Fuel_Type_Diesel  Fuel_Type_Petrol  Seller_Type_Individual  \\\n0                 0                 1                       0   \n1                 1                 0                       0   \n2                 0                 1                       0   \n3                 0                 1                       0   \n4                 1                 0                       0   \n\n   Transmission_Manual  \n0                    1  \n1                    1  \n2                    1  \n3                    1  \n4                    1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Selling_Price(lacs)</th>\n      <th>Present_Price(lacs)</th>\n      <th>Kms_Driven</th>\n      <th>Past_Owners</th>\n      <th>Age</th>\n      <th>Fuel_Type_Diesel</th>\n      <th>Fuel_Type_Petrol</th>\n      <th>Seller_Type_Individual</th>\n      <th>Transmission_Manual</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3.35</td>\n      <td>5.59</td>\n      <td>27000</td>\n      <td>0</td>\n      <td>10</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.75</td>\n      <td>9.54</td>\n      <td>43000</td>\n      <td>0</td>\n      <td>11</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.25</td>\n      <td>9.85</td>\n      <td>6900</td>\n      <td>0</td>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2.85</td>\n      <td>4.15</td>\n      <td>5200</td>\n      <td>0</td>\n      <td>13</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.60</td>\n      <td>6.87</td>\n      <td>42450</td>\n      <td>0</td>\n      <td>10</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y = cars['Selling_Price(lacs)']\nx = cars.drop('Selling_Price(lacs)', axis = 1)\n#separating independent and dependent variable\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:28.673836Z","iopub.execute_input":"2024-04-19T11:45:28.674263Z","iopub.status.idle":"2024-04-19T11:45:28.681518Z","shell.execute_reply.started":"2024-04-19T11:45:28.674221Z","shell.execute_reply":"2024-04-19T11:45:28.680336Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:28.682809Z","iopub.execute_input":"2024-04-19T11:45:28.683162Z","iopub.status.idle":"2024-04-19T11:45:30.157501Z","shell.execute_reply.started":"2024-04-19T11:45:28.683133Z","shell.execute_reply":"2024-04-19T11:45:30.155571Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\n#splitting test and train data \n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:30.165313Z","iopub.execute_input":"2024-04-19T11:45:30.16615Z","iopub.status.idle":"2024-04-19T11:45:30.188984Z","shell.execute_reply.started":"2024-04-19T11:45:30.166085Z","shell.execute_reply":"2024-04-19T11:45:30.18714Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\np_train = model.predict(X_train)\np_test = model.predict(X_test)\n# predictions","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:30.197145Z","iopub.execute_input":"2024-04-19T11:45:30.199318Z","iopub.status.idle":"2024-04-19T11:45:30.347832Z","shell.execute_reply.started":"2024-04-19T11:45:30.19927Z","shell.execute_reply":"2024-04-19T11:45:30.346469Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import r2_score\n\nR2_train = []\nR2_test = []\n\nR2_train_model = r2_score(y_train,p_train)\nR2_train.append(round(R2_train_model,2))\n\nR2_test_model = r2_score(y_test,p_test)\nR2_test.append(round(R2_test_model,2))\n\nprint(\"Train R2-score :\",round(R2_train_model,2))\nprint(\"Test R2-score :\",round(R2_test_model,2))","metadata":{"execution":{"iopub.status.busy":"2024-04-19T11:45:30.351463Z","iopub.execute_input":"2024-04-19T11:45:30.351945Z","iopub.status.idle":"2024-04-19T11:45:30.363084Z","shell.execute_reply.started":"2024-04-19T11:45:30.351905Z","shell.execute_reply":"2024-04-19T11:45:30.36184Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Train R2-score : 0.88\nTest R2-score : 0.86\n","output_type":"stream"}]}]}